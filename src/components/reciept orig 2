import React, {Component} from 'react';
import {Platform, StyleSheet, Modal, Text, TouchableHighlight, ScrollView, View, TextInput, 
  ListView, Button, TouchableOpacity, Image, Dimensions, KeyboardAvoidingView} from 'react-native';
// import { KeyboardAvoidingView } from 'react-native';

import { Constants, Camera, Permissions } from 'expo';
import isIPhoneX from 'react-native-is-iphonex';
import KeyboardListener from 'react-native-keyboard-listener';
import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'
import { Dropdown } from 'react-native-material-dropdown';
import { CheckBox } from 'react-native-elements'
import { 
  FontAwesome,
  MaterialIcons,
  Foundation,
  MaterialCommunityIcons,
  Octicons
} from '@expo/vector-icons';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';

import CameraContainer from './CameraContainer';
import TextComponentContainer from './TextComponentContainer';
import ListItem from './ListItem';

export default class NewReciept extends Component {
  constructor(props) {
      super(props);
      this.renderRow = this.renderRow.bind(this);
      this.renderRowTags = this.renderRowTags.bind(this);

      
      let groupItems = [];
      let groupItemsTemp = this.props.groups.groupItems;
      Object.keys(groupItemsTemp).map(name => {
        groupItems.push({value: name, label: name});
      });
      groupItems.push({value: 'Add New Group', label: 'Add New Group'});

      // let groupElements = [];


      let tagItemsTemp = this.props.tags.tagItems;
      let tagItems = [];
      Object.keys(tagItemsTemp).map(name => {
        tagItems.push({value: name, label: name});
      });
      tagItems.push({value: 'Add New Tag', label: 'Add New Field'});

  this.state = {

    modalVisible: this.props.showModal,
    isPageOne: true,
    isCameraPage: false,
    isPageTwo: false,
    keyboardOpen: false,
    nextButtonVisible: true,

    recieptInputVal: "",
    isText: null,

    hasCameraPermission: null,
    type: Camera.Constants.Type.back,
    isCameraPage: false,
    isPictureReciept: false,
    pictureLocation: "",

    //Page 2
    nameInputVal: "",
    groupSelected: "None",
    tagSelected: "None",

    groupData: groupItems,
    groupElements: [],
    createGroupModalVisible: false,
    tagData: tagItems,
    
    groups: [],
    addedGroups: [],
    newGroups: [],
    dataSourceGroups: new ListView.DataSource({
        rowHasChanged: (row1, row2) => row1 !== row2,
      }).cloneWithRows([]),
    tags: [],
    addedTags: [],
    addedTags2: [],
    newTags: [],
    dataSourceTags: new ListView.DataSource({
        rowHasChanged: (row1, row2) => row1 !== row2,
      }).cloneWithRows([]),

    addNewGroup: false,
    showGroupValue: false,
    groupNameInputVal: "",
    groupInputVal: "",

    addNewTag: false,
    showTagValue: false,
    tagNameInputVal: "",
    tagTypeSelected: "",
    tagInputVal: "",
    textArray: [],
  };
}

  setModalVisible(visible) {
    this.setState({modalVisible: visible});
  }

  onPressAddText = () => {
    let text = this.state.recieptInputVal;
    let array = [];
    let lines = text.split('\n');
    lines.forEach((line) => {
      if (line !== "") {
        array.push(line);
      }
    });
    this.setState({isPageOne: false, isPageTwo:true, textArray: array});
  }

  onPressTakePhoto = () => {
    let permissionStatus;
    let asyncExample = async () => {
      return await Permissions.askAsync(Permissions.CAMERA);
    };
    asyncExample().then(users => {
      const { status } = users;
      permissionStatus = status;
      console.log(permissionStatus);
    })
    .catch(err => console.error(err))
    this.setState({ isPageOne: false, isPageTwo: false, isCameraPage: true, isPictureReciept: false });
  }

  onPressSkip = () => {
    this.setState({isPageOne: false, isPageTwo:true});
  }

  closeCamera = () => {
    this.setState({isPageOne: true, isCameraPage: false});
  }

  pictureSavedCallback = (pictureLocation) => {
    this.setState({ isPageOne: false, isPageTwo: true, isCameraPage: false,
     isPictureReciept: true, pictureLocation });
  }

  onCloseListItem = (type, text) => {
    if (type === "group") {
      let addedGroups = this.state.addedGroups;
      let newGroups = this.state.newGroups;
      let groups = this.state.groups;

      let filteredAddedGroups = addedGroups.filter(group => (group !== text));
      let filteredNewGroups = newGroups.filter(group => (group !== text));
      let filteredGroups = groups.filter(group => (group !== text));

      this.setState({
        groups: filteredGroups, 
        addedGroups: filteredAddedGroups, 
        newGroups: filteredNewGroups, 
        dataSourceGroups: this.state.dataSourceGroups.cloneWithRows(filteredGroups) });
    }
    else if (type === "tag") {
      let addedTags = this.state.addedTags;
      let newTags = this.state.newTags;
      let tags = this.state.tags;
      
      let filteredAddedTags = addedTags.filter(tag => (tag !== text));
      let filteredNewTags = newTags.filter(tag => (tag !== text));
      let filteredTags = tags.filter(tag => (tag !== text));

      this.setState({
        tags: filteredTags, 
        addedTags: filteredAddedTags, 
        newTags: filteredNewTags, 
        dataSourceTags: this.state.dataSourceTags.cloneWithRows(filteredTags) });
    }
  }

  renderRow(data) {
    return (
      <ListItem type="group" text={data} onClose={this.onCloseListItem} />
    );
  }

  renderRowTags(data) {
    return (
      <ListItem type="tag" text={data} onClose={this.onCloseListItem} />
    );
  }

  onSelectGroup = (text) => {
    if (text === "Add New Group") {
      this.setState({groupSelected: text, addNewGroup: true, showGroupValue: true});
    }
    else if (text !== "None") {
      let addedGroups = this.state.addedGroups;
      let groups = this.state.groups;
      let exists = 0;
      groups.forEach(function(group) {
        if (group === text) {
          exists = 1;
        }
      });
      if (!exists) {
        addedGroups.push(text);
        groups.push(text);
      }
      newDataSourceGroups = new ListView.DataSource({
        rowHasChanged: (row1, row2) => row1 !== row2,
      }).cloneWithRows(groups);

      this.setState({groups: groups, addedGroups: addedGroups, dataSourceGroups: newDataSourceGroups });
    }
  }

  onPressAddGroup = () => {
    if ((this.state.addNewGroup) && (this.state.groupNameInputVal !== "")) {
      let groupName = this.state.groupNameInputVal;

      let newGroups = this.state.newGroups;
      let groups = this.state.groups;

      let exists = 0;
      groups.forEach(function(group) {
        if (group === groupName) {
          exists = 1;
        }
      });
      if (!exists) {
        newGroups.push(groupName);
        groups.push(groupName);
      }
      this.setState({groupNameVal: "", 
        groupSelected: "None", 
        addNewGroup: false, 
        groups: groups, 
        newGroups: newGroups, 
        dataSourceGroups: this.state.dataSourceGroups.cloneWithRows(groups) });
    }
  }

  createGroupModal = () => {
    console.log(this);
    let groupName = this.state.groupNameInputVal;
    this.props.createGroup( groupName, [] );
    this.setState({createGroupModalVisible: false});
  }

  createTagModal = () => {
    let tagName = this.state.tagNameInputVal;
    let tagType = this.state.tagTypeSelected;

    this.props.createTag( tagName, tagType );
    this.setState({createTagModalVisible: false});
  }

  onSelectTag = (text) => {
    if (text === "Add New Tag") {
      this.setState({tagSelected: text, addNewTag: true, showTagValue: true});
    }
    else if (text !== "None") {
      let tagType = this.props.tags.tagItems[text].type;
      var descriptor;
      var descriptor = (function(input) {  
        switch(input) {
          case 'Number':
            return "integer or decimal";
          case 'Text':
            return "text";
          case 'Date':
            return "dd/mm/yyyy";
          case 'Boolean':
            return "true/false";
          default:
            return "";
        }
      })(tagType);
      this.setState({tagSelected: text, tagFormat: descriptor, tagTypeSelected: "None", addNewTag: false, showTagValue: true});
    }
  }

  onSelectTagType = (text) => {
    this.setState({tagTypeSelected: text});
  }

  onPressAddTag = () => {
    if ((this.state.addNewTag) && (this.state.tagNameInputVal !== "") && (this.state.tagInputVal !== "")) {
      let tagName = this.state.tagNameInputVal;
      let tagInput = this.state.tagInputVal;

      let newTags = this.state.newTags;
      let tags = this.state.tags;
      let exists = 0;

      tags.forEach(function(tag) {
        let tagNameHolder = tag.split(': ')[0];
        if (tagNameHolder === tagName) {
          exists = 1;
        }
      });
      if (!exists) {
        // addedTags.push(tagName + ": " + tagInput);
        newTags.push({name: tagName, type: this.state.tagTypeSelected, value: tagInput});
        tags.push(tagName + ": " + tagInput);
      }
      this.setState({addNewTag: false, tagSelected: "None", tagFormat: "", tagInputVal: "", tagNameInputVal: "", newTags: newTags, dataSourceTags: this.state.dataSourceTags.cloneWithRows(tags) });
    }

    else if ((this.state.tagInputVal !== "")) {
      let tagSelected = this.state.tagSelected;
      let tagInput = this.state.tagInputVal;

      let addedTags = this.state.addedTags;
      let tags = this.state.tags;
      let exists = 0;

      tags.forEach(function(tag) {
        let tagName = tag.split(': ')[0];
        if (tagName === tagSelected) {
          exists = 1;
        }
      });
      if (!exists) {
        addedTags.push(tagSelected + ": " + tagInput);
        tags.push(tagSelected + ": " + tagInput);
      }
      this.setState({addNewTag: false, tagSelected: "None", tagFormat: "", tagInputVal: "", tagNameInputVal: "", addedTags: addedTags, dataSourceTags: this.state.dataSourceTags.cloneWithRows(tags) });
    }
  }

  onPressAddReciept = () => {
    // let tags = this.props.tags.tagItems;
    // // let refs = this.state;

    // let refKeys = Object.keys(refs);
    // refKeys.map((refKey) => {
    //   console.log(this.state[refKey]);
    // });

    // console.log(refs);



      // let addedGroups = this.state.addedGroups;
      // let newGroups = this.state.newGroups;
      // let addedTags = this.state.addedTags;
      // let newTags = this.state.newTags;

      // let groups = addedGroups.concat(newGroups);
      // let tags = [];

      // let context = this;

      // addedGroups.forEach(function(group) {
      //   context.props.addToGroup(group, context.props.id);
      // });

      // newGroups.forEach(function(group) {
      //   context.props.createGroup(group, [context.props.id]);
      // });

      // addedTags.forEach(function(tag) {
      //   let tagName = tag.split(': ')[0];
      //   let tagValue = tag.split(': ')[1];
      //   context.props.addTagInstance(tagName, context.props.id, tagValue);
      //   tags.push({name: tagName, value: tagValue});
      // });

      // newTags.forEach(function(tag) {
      //   context.props.createTag(tag.name, tag.type, context.props.id, tag.value);
      //   tags.push({name: tag.name, value: tag.value});
      // });
      // this.props.createReciept(this.state.nameInputVal, this.state.recieptInputVal, this.state.pictureLocation, groups, tags);
    }



  copyText = (text) => {
    this.setState({tagInputVal: text});
  }

  onKeyPressCallback = (event, name, tagType) => {
    // console.log(input, tagName, tagType);
    let inputValue;
    // console.log(event.nativeEvent.key);
    let key = event.nativeEvent.key;
    // console.log(key);
    // console.log(tagName, tagType);
    // if (!this.state[tagName]) {
      inputValue = "$ " + key;
      // console.log(inputValue);
      console.log(this.state[name]);
    // }
    // let addedTags2 = this.state.addedTags2;
    // addTags2.push(tagName);
    this.setState({[name]: inputValue});
  }

  onSubmitCallback = (ref) => {
    console.log(ref);
    // secondTextInput.focus
  }

  // onChangeCallback = (input, tagName, tagType) => {
  //   // console.log(input, tagName, tagType);
  //   let staticInput;
  //   let transformedInput;
  //   // console.log(input)
    
  //   if (tagType === "Number") {
  //     staticInput = input.slice(2);
  //     // console.log(staticInput);
  //     if (input.length < 2) {
  //       transformedInput = "$ " + input;
  //       console.log(transformedInput);
  //     }

  //     else {
  //       transformedInput = input;
  //     }
      
  //   }
  //   this.setState({[tagName]: transformedInput});
  //   // let addedTags2 = this.state.addedTags2;
  //   // addTags2.push(tagName);
  // }

  render() {
    const tagTypeData = [
      { value: 'Number', label: 'Number (integer or decimal)' },
      { value: 'Text', label: 'Text (any)' },
      { value: 'Date', label: 'Date (dd/mm/yyyy)' },
      { value: 'Boolean', label: 'True/False' },
    ];

    const win = Dimensions.get('window');
    if (this.state.isPageOne) {
    return (
        <Modal
          animationType="slide"
          transparent={false}
          visible={this.state.modalVisible}
          onRequestClose={() => {
            //alert('Modal has been closed.');
          }}> 
            <View style={pageOneStyles.mainContainer}>
              <View style={pageOneStyles.menuContainer}>
                  <FontAwesome name="window-close-o" size={40} color="firebrick" onPress={() => {
                        this.props.onClose();
                      }}/>
              </View>
              <Text style={{flex: .1, justifyContent: 'center', fontSize: 28, fontFamily: 'monospace-typewriter', color: '#042037'}}>Add Reciept</Text>
              <TouchableOpacity style={{flex:.4, alignItems:'center', justifyContent: 'center', 
              width:'95%', backgroundColor: '#a9ccbf', borderWidth:1}} 
              onPress={this.onPressTakePhoto}>
                    <Text style={{fontSize:20, color: 'darkcyan'}}>Take Photo</Text>
              </TouchableOpacity>
              <TouchableOpacity style={{flex:.4, alignItems:'center', justifyContent: 'center', width:'95%', backgroundColor: '#a9ccbf', borderWidth:1, marginTop:10}} onPress={this.onPressSkip}>
                    <Text style={{fontSize:20, color: 'darkcyan'}}>Skip</Text>
              </TouchableOpacity>
            </View>
          </Modal>
        );
      }
      else if (this.state.isCameraPage) {
        return (
          <Modal
            animationType="slide"
            transparent={false}
            visible={this.state.modalVisible}
            onRequestClose={() => {
              //alert('Modal has been closed.');
            }}> 
            <CameraContainer close={this.closeCamera} pictureSavedCallback={this.pictureSavedCallback}/>
            </Modal>
          );
      }
      else if (this.state.isPageTwo) {
        let groupItemsTemp = this.props.groups.groupItems;
        let groupElements = [];
        if (groupItemsTemp) {
          groupElements = Object.keys(groupItemsTemp).map(name => {
            return ( 
              <View key={name} style={{flexDirection: 'row', justifyContent: 'space-between', width: '100%', marginTop: 10}}>
                  <Text style={{marginLeft:10, fontFamily: 'monospace-typewriter', borderWidth: 1, padding:2}}>{name}</Text>
                  <CheckBox
                    title='Include'
                    containerStyle={{padding:0, margin:0, backgroundColor:'lightgreen'}}
                    checked={this.state[name]}
                    onPress={() => this.setState({[name]: !this.state[name]})}
                    // ref={[name]}
                  />
              </View>
            );
          });
        }
        let tagItemsTemp = this.props.tags.tagItems;
        let tagElements = [];
        if (tagItemsTemp) {
          tagElements = Object.keys(tagItemsTemp).map(name => {
            let type = tagItemsTemp[name].type;
            let initialState;
            // if (type === "Number") {
            //   initialState = "$ ";
            // }
            return ( 
              <View key={name} style={{flexDirection: 'row', justifyContent: 'space-between', width: '100%', marginTop: 10}}>
                  <Text style={{marginLeft:10, fontFamily: 'monospace-typewriter', borderWidth: 1, padding:2}}>{name}</Text>
                  {type === "Date" ? (
                    <View style={{flexDirection: 'row'}}>
                      <TextInput 
                        style={{
                        height: 25, 
                        width: 50,
                        marginRight: 10,
                        borderColor: 'gray', 
                        borderWidth: 1,
                        textAlignVertical: 'top'}}
                        placeholder = {"dd"}
                        onChangeText={(text) => this.setState({["first"+name]: text})}
                        onSubmitEditing={() => { this.onSubmitCallback("second"+name); }}
                        value = {this.state["first"+name]}
                        ref={(input) => { this["first"+name] = input; }}
                        />
                      <TextInput 
                        style={{
                        height: 25, 
                        width: 50,
                        marginRight: 10,
                        borderColor: 'gray', 
                        borderWidth: 1,
                        textAlignVertical: 'top'}}
                        placeholder = {"mm"}
                        onChangeText={(text) => this.setState({["second"+name]: text})}
                        ref={(input) => { this["second"+name] = input; }}
                        // ref={["second"+name]}
                        />
                      <TextInput 
                        style={{
                        height: 25, 
                        width: 50,
                        marginRight: 10,
                        borderColor: 'gray', 
                        borderWidth: 1,
                        textAlignVertical: 'top'}}
                        placeholder = {"yyyy"}
                        onChangeText={(text) => this.setState({["third"+name]: text})}
                        value = {this.state["third"+name]}
                        ref={(input) => { this["third"+name] = input; }}
                        // ref={["third"+name]}
                        />
                    </View>
                    ) : (
                  <TextInput
                    style={{
                    height: 25, 
                    width: 200,
                    marginRight: 10,
                    borderColor: 'gray', 
                    borderWidth: 1,
                    textAlignVertical: 'top'}}
                    // ref={name}
                    placeholder= {
                      type === "Number" ? "$" 
                    : type === "Text" ? "Text" 
                    : type === "Boolean" ? "True/False"
                    : ""
                  }
                    // onKeyPress={(key) => this.onKeyPressCallback(key, name, type)}
                    onChangeText={(text) => this.setState({[name]: text})}
                    onFocus={() => this.setState({nextButtonVisible: !this.state.nextButtonVisible})}
                    // onChangeText={(tagInputVal) => this.onChangeCallback(tagInputVal, name, type)}
                    value = {this.state[name]}
                    ref={(input) => { this[name] = input; }}
                  />
                  )}
              </View>
            );
          });
        }

      // console.log(groupItemsTemp);
        return (
          <Modal
          animationType="slide"
          transparent={false}
          visible={this.state.modalVisible}
          onRequestClose={() => {
            //alert('Modal has been closed.');
          }}> 
            <View style={{width: '100%'}}>
              <View style={pageTwoStyles.menuContainer}>
                    <MaterialIcons name="keyboard-backspace" size={50} color="teal" onPress={() => {
                          this.setState({isPageOne: true, isPageTwo: false});
                        }}/>
                    <FontAwesome name="window-close-o" size={40} color="firebrick" onPress={() => {
                          this.props.onClose();
                        }}/>
                </View>
            </View>
            <KeyboardAvoidingView style={{flex:1, backgroundColor: '#d3dee7', paddingBottom: 200}} behavior="padding" enabled>
            <ScrollView contentContainerStyle={{backgroundColor: '#d3dee7'}} endFillColor='#d3dee7'>
              
              <View style={{padding: 5}}>
                <Text style={{paddingRight:5, fontSize:16}}>Name: </Text>
                <TextInput
                  style={pageTwoStyles.textInput}
                  onChangeText={(nameInputVal) => this.setState({nameInputVal})}
                  value={this.state.nameInputVal}
                />
              </View>

              <View style={{marginTop: 20, padding: 5}}>
                <Text style={{fontSize: 24, fontFamily: 'monospace-typewriter', color: '#042037'}}>Group(s):</Text>
              </View>
              
              {groupElements}
              <TouchableOpacity
                 style={{alignSelf: 'center', width:'95%', marginTop:10, borderWidth: 1, backgroundColor: '#a9ccbf'}}
                 onPress={this.onPressAddReciept}
               >
                 <Text 
                 onPress={() => this.setState({createGroupModalVisible:true})}
                 style={{alignSelf: 'center', fontSize:24, fontFamily: 'monospace-typewriter', color: '#042037'}}> Create New Group </Text>
               </TouchableOpacity>

               <View style={{marginTop: 20, padding: 5}}>
                <Text style={{fontSize: 24, fontFamily: 'monospace-typewriter', color: '#042037'}}>Fields(s):</Text>
              </View>
              {tagElements}

              <TouchableOpacity
                 style={{alignSelf: 'center', width:'95%', marginTop:10, borderWidth: 1, backgroundColor: '#a9ccbf'}}
                 onPress={this.onPressAddReciept}
               >
                 <Text 
                 onPress={() => this.setState({createTagModalVisible:true})}
                 style={{alignSelf: 'center', fontSize:24, fontFamily: 'monospace-typewriter', color: '#042037'}}> Create New Field </Text>
               </TouchableOpacity>
              </ScrollView>

              {this.state.nextButtonVisible ? (
                <View style={{flexDirection:'row', alignSelf:'flex-end', alignItems: 'flex-end'}}>
              <TouchableOpacity style={{padding:10}}>
                <Text style={{fontSize: 15, color: 'blue', borderColor: 'white', borderWidth: 2, padding:5}}>Done</Text>
              </TouchableOpacity>
              <TouchableOpacity style={{padding:10}}>
                <Text style={{fontSize: 15, color: 'blue', borderColor: 'white', borderWidth: 2, padding:5}}>Next</Text>
              </TouchableOpacity>
              </View>
              ) : (
              null
              )}

              </KeyboardAvoidingView>

               {this.state.createGroupModalVisible ? (
                <View style={{
                  position: 'absolute', 
                  left: (win.width/5), 
                  width: (win.width*.6), 
                  top: (win.height/6), 
                  height: (win.height*.2), 
                  backgroundColor: 'white',
                  borderWidth: 1,
                }}>
                    <Text style={{fontSize:20, marginTop: 5, marginLeft: 5}}> Name:</Text>
                    <TextInput
                      style={{
                      marginTop: 10,
                      width: '95%',
                      borderColor: 'gray', 
                      borderWidth: 1,
                      textAlignVertical: 'top',
                      alignSelf: 'center',
                    }}
                      onChangeText={(groupNameInputVal) => this.setState({groupNameInputVal})}
                      value={this.state.groupNameInputVal}
                    />
                    <View style={{
                      width: '100%',
                      justifyContent: 'space-between', 
                      flexDirection: 'row', 
                      position: 'absolute', 
                      bottom: 10
                    }}>
                      <Button
                        onPress={() => this.setState({createGroupModalVisible:false})}
                        title="No"
                        color="red"
                        accessibilityLabel="Learn more about this purple button"
                      />
                      <Button
                        onPress={this.createGroupModal}
                        title="Create"
                        color="teal"
                        accessibilityLabel="Learn more about this purple button"
                      />
                    </View>
                </View>
                ) : (
                null
                )}

                {this.state.createTagModalVisible ? (
                  <View style={{
                    position: 'absolute', 
                    left: (win.width/5), 
                    width: (win.width*.6), 
                    bottom: (win.height/6), 
                    height: (win.height*.3), 
                    backgroundColor: 'white',
                    borderWidth: 1,
                  }}>
                      <Text style={{fontSize:20, marginTop: 5, marginLeft: 5}}> Field Name:</Text>
                      <TextInput
                        style={{
                        marginTop: 10,
                        width: '95%',
                        borderColor: 'gray', 
                        borderWidth: 1,
                        textAlignVertical: 'top',
                        alignSelf: 'center',
                      }}
                        onChangeText={(tagNameInputVal) => this.setState({tagNameInputVal})}
                        value={this.state.tagNameInputVal}
                      />
                      <View style={{flexDirection:'row'}}>
                      <Dropdown
                        containerStyle={{width: '95%', left: 5}}
                        value={this.state.tagTypeSelected}
                        data={tagTypeData}
                        label='Field Type'
                        labelFontSize={16}
                        onChangeText={this.onSelectTagType}
                      />
                      </View>
                      <View style={{
                        width: '100%',
                        justifyContent: 'space-between', 
                        flexDirection: 'row', 
                        position: 'absolute', 
                        bottom: 10
                      }}>
                        <Button
                          onPress={() => this.setState({createTagModalVisible:false})}
                          title="No"
                          color="red"
                          accessibilityLabel="Learn more about this purple button"
                        />
                        <Button
                          onPress={this.createTagModal}
                          title="Create"
                          color="teal"
                          accessibilityLabel="Learn more about this purple button"
                        />
                      </View>
                  </View>
                  ) : (
                  null
                  )}

              

              {this.state.addNewTag ? ( 
                <View style={{padding: 5}}>
                  <Text style={{paddingRight:5, fontSize:16}}>New Tag Name: </Text>
                  <TextInput
                    style={pageTwoStyles.textInput}
                    onChangeText={(tagNameInputVal) => this.setState({tagNameInputVal})}
                    value={this.state.tagNameInputVal}
                  />
                </View>
                ) : (null)}
              {!!this.state.addNewTag ? ( 
                <View style={{padding: 5}}>
                  <Dropdown
                    value={this.state.tagTypeSelected}
                    data={tagTypeData}
                    label='Tag Type'
                    labelFontSize={16}
                    onChangeText={this.onSelectTagType}
                  />
                </View>
                ) : (
                null
                )}
                {this.state.showTagValue ? (
                  <View>
                <View style={{padding: 5}}>
                  <Text style={{marginTop:10, fontSize:16}}>Tag Value: </Text>
                  <TextInput
                    style={pageTwoStyles.textInput}
                    onChangeText={(tagInputVal) => this.setState({tagInputVal})}
                    value={this.state.tagInputVal}
                  />
                </View>
                
                <View style={{marginTop: 20, padding: 5}}>
                <TouchableOpacity
                   style={pageOneStyles.buttons}
                   onPress={this.onPressAddTag}
                 >
                   <Text style={{alignSelf: 'center', fontSize:24, fontFamily: 'monospace-typewriter', color: '#042037'}}> Add Tag </Text>
                 </TouchableOpacity>
                 </View>
                 </View>
                 ) : (null)}
            {this.state.isPictureReciept ? ( 
              <Image
                resizeMode={'contain'}
                style={{alignSelf: 'center', width: (win.width*.95), height: (win.height*.7)}}
                source={{uri: this.state.pictureLocation}}
              />
              ) : (
              null
            )}
              

            
          </Modal>
          );
      }
  }
}

let marginTop = (Platform.OS === 'ios' ? 25 : 0);
const pageOneStyles = StyleSheet.create({
  mainContainer: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#d3dee7',
  },
  menuContainer: {
    marginTop: marginTop + 5,
    width: '90%',
    flexDirection: 'row',
    justifyContent: 'flex-end',
  },
  pasteText: {
    marginTop: 10,
    width: 300,
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
  },
  textInput: {
    height: 250, 
    width: 300,
    borderColor: 'gray', 
    borderWidth: 1,
    textAlignVertical: 'top',
  },
  addButton: {
    marginTop: 40,
    width: 300,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
  buttons: {
    borderWidth: 1,
    backgroundColor: '#a9ccbf',
  },
  orUseContainer: {
    marginTop: 0,
    width: 300,
    flexDirection: 'row',
    justifyContent: 'flex-start',
    alignItems: 'center',
  },
  photoButton: {
    marginTop: 40,
    width: 300,
    flexDirection: 'row',
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
});

const pageTwoStyles = StyleSheet.create({
  mainContainer: {
    flex: 1,
    alignItems: 'center',
    backgroundColor: '#d3dee7',
  },
  menuContainer: {
    marginTop: marginTop,
    backgroundColor: '#d3dee7',
    alignItems: 'center',
    width: '95%',
    flex: .1,
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  textInputContainer: {
    width: "90%",
    flexDirection: 'column',
  },
  textInputContainer2: {
    width: "90%",
    flexDirection: 'row',
  },
  textInput: {
    height: 25, 
    width: "100%",
    borderColor: 'gray', 
    borderWidth: 1,
    textAlignVertical: 'top',
  },
});